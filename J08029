QuanMa/Main08029.java

package javaCOLLECTION.QuanMa;

import java.util.Scanner;


public class Main08029 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int t = Integer.parseInt(in.nextLine());
        while(t-->0){
            String start = in.next();
            String end = in.next();
            Pair beg = new Pair(start.charAt(0) - 'a' + 1, start.charAt(1) - '0');
            Pair fis = new Pair(end.charAt(0) - 'a' + 1, end.charAt(1) - '0');
            QuanMa qma = new QuanMa(beg, fis);
            System.out.println(qma);
        }
    }
}

QuanMa/Pair.java
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package javaCOLLECTION.QuanMa;

/**
 *
 * @author ADMIN
 */
public class Pair {
    private int fi,se;

    public Pair(int fi, int se) {
        this.fi = fi;
        this.se = se;
    }

    public int getFi() {
        return fi;
    }

    public int getSe() {
        return se;
    }
    
}

QuanMa/QuanMa.java

package javaCOLLECTION.QuanMa;

import java.util.LinkedList;
import java.util.Queue;

public class QuanMa{
    private  int[] dx = {-1, -2, -2, -1, 1, 2, 2, 1};
    private  int[] dy = {-2, -1, 1, 2, 2, 1, -1, -2};
    private int kq;
    private Pair a,b;

    public QuanMa(Pair a, Pair b) {
        this.a = a;
        this.b = b;
        this.kq = solve(a, b);
    }
    
    private int  solve(Pair a, Pair b) {
        int[][] f = new int[9][9];
        Queue <Pair> q = new LinkedList<>();
        q.add(a);
        while(!q.isEmpty()){
            Pair top = q.poll();
            if(top.getFi() == b.getFi() && top.getSe() == b.getSe()){
                return f[b.getFi()][b.getSe()];
            }
            int x = top.getFi(), y = top.getSe();
            for(int i = 0; i < 8; i++){
                int x1 = x + dx[i];
                int y1 = y + dy[i];
                if(x1 > 0 && x1 < 9 && y1 > 0 && y1 < 9 && f[x1][y1] == 0){
                    q.add(new Pair(x1, y1));
                    f[x1][y1] = f[x][y] + 1;
                }
            }
        }
        return 0;
    }
    @Override
    public String toString() {
        return String.valueOf(kq);
    }
}
    

